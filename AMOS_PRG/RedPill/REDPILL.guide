@DATABASE REDPILL GAME CREATOR
@Author Carlos Peris
@$VER: REDPILL V0.9.X (2024)
@NODE OVERVIEW "Overview of REDPILL V0.9.X"

                                  @{b}@{u}Overview@{ub}@{uu}

REDPILL is an Amiga game maker for non programmers and people with little time.
@ENDNODE OVERVIEW


@NODE DISTRIBUTION "Sharing a game"

                                  @{b}@{u}Sharing a game@{ub}@{uu}

1.Automatically
---------------
1-Open your project
2-Click on Build, a Build folder will be created with the necessary files
3-Select your destication platform

    Low Spec Amiga: When you target A500 or similar. Game will still run in 
                    all AMIGAs.
	Restrictions: 32 objects per level maximum. 
                      200 Frames maximum
                      No CD capabilities
                      No AGA parallax (ECS parallax allowed)
                      No custom OS fonts (bitmap fonts allowed)

    Generic: For All AMIGAs.

    68020: Code optimixed for Motorola 68020 or higher.

4-Select if assets must be compressed, compressing will make them smaller in 
  disk.
5-Select if you want to copy files to start game from disk.
    If you are using a different OS than destination platform you may need 
    to modify the files or use the ones from the target OS system.
6-Prepare WHDLoad package if you want to distribute your game for hi-end 
  AMIGAs, emulators or A500 mini.



@ENDNODE DISTRIBUTION


@NODE ConditionTriggers "Condition Triggers"
@{fg shine}Condition Triggers@{fg text}
-----------------------------------------------------------------------------

CONDITIONS

General
@{" Always        " link ConditionAlways}
@{" Once          " link ConditionOnce}
@{" Never         " link ConditionNever}
@{" Level is      " link ConditionLevelIs}
@{" On Level Load " link ConditionOnLevelLoad}
@{" Countdown     " link ConditionCountdown}

Input
@{" Input Left         " link ConditionInputLeft}
@{" Input Right        " link ConditionInputRight}
@{" Input Up           " link ConditionInputUp}
@{" Input Down         " link ConditionInputDown}
@{" Input Fire 1       " link ConditionInputFire1}
@{" Input Fire 2       " link ConditionInputFire2}
@{" Input CD32 Play    " link ConditionCD32Play}
@{" Input CD32 Reverse " link ConditionCD32Reverse}
@{" Input CD32 Forward " link ConditionCD32Forward}
@{" Input CD32 Green   " link ConditionCD32Green}
@{" Input CD32 Yellow  " link ConditionCD32Yellow}
@{" Input CD32 Red     " link ConditionCD32Red}
@{" Input CD32 Blue    " link ConditionCD32Blue}
@{" Input Options      " link ConditionInputOptions}

Vars
@{" X Var Triggered  " link ConditionXVarTriggered}
@{" Var True         " link ConditionVarTrue}
@{" Var False        " link ConditionVarFalse}
@{" Var Is           " link ConditionVarIs}
@{" Custom 1 is      " link ConditionCustom1Is}
@{" Custom 2 is      " link ConditionCustom2Is}
@{" GO Timer Trig    " link ConditionGOTimerTrig}
@{" Timer active     " link ConditionTimerActive}

Render
@{" Anim is          " link ConditionAnimIs}
@{" Anim is not      " link ConditionAnimIsNot}
@{" Anim Frame is    " link ConditionAnimFrameIs}
@{" Anim finishes    " link ConditionAnimFinishes}
@{" Is on screen     " link ConditionIsOnScreen}
@{" Is off screen    " link ConditionIsOffScreen}

Cinematic
@{" Idle             " link ConditionIdle}
@{" Position X       " link ConditionPositionX}
@{" Position Y       " link ConditionPositionY}
@{" Grounded         " link ConditionGrounded}
@{" Not Grounded     " link ConditionNotGrounded}
@{" Side X           " link ConditionSideX}
@{" Speed X          " link ConditionSpeedX}
@{" Speed Y          " link ConditionSpeedY}
@{" Speed (Angle)    " link ConditionSpeedAngle}
@{" Angle is         " link ConditionAngleIs}

Objects
@{" Collides Player  " link ConditionCollidesPlayer}
@{" Collides Obj     " link ConditionCollidesObj}
@{" Collides Type    " link ConditionCollidesType}
@{" Target Pos X     " link ConditionTargetPosX}
@{" Target Pos Y     " link ConditionTargetPosY}
@{" Dist to Target   " link ConditionDistToTarget}

Map
@{" Collides H Wall  " link ConditionCollidesHWall}
@{" Collides Wall    " link ConditionCollidesWall}
@{" Tile is          " link ConditionTileis}
@{" Tile Comp        " link ConditionTileComp}
@{" Free Tile        " link ConditionFreeComp}
@{" Solid Tile       " link ConditionSolidTile}
@{" Has Col Left     " link ConditionHasColLeft}
@{" Has Col Right    " link ConditionHasColRight}
@{" Has Col Up       " link ConditionHasColUp}
@{" Has Col Down     " link ConditionHasColDown}

@ENDNODE ConditionTriggers

@NODE ActionTriggers "Action Triggers"

@{fg shine}Action Triggers@{fg text}-----------------------------------------------------------------------------
@ENDNODE ActionTriggers



@NODE START "Main screen"
This is the main REDPILL screen.
To start working in a game click the NEW button or LOAD a game from the projects folder.

Once a project is active, the rest of main screen buttons will be available.

Press Start to test your game from the initial level.
Press Play to test your game from the current level.

Build button prepares your game for distribution inside the build folder."

@ENDNODE START




@NODE PLAY "Play/Start"
Play allows you to test your game by playing the current level.

When having multiple levels if instead of the current level you want to play from the start of the game use the Start button that will appear next to the play one.

Start allows you to test your game by playing the starting level.
The start level is defined in the Game Setup screen.

The play mode in the editor could be a bit slower than in the final game as some extra checks and routines are being executed.

@ENDNODE PLAY




@NODE SCREEN_GAME "Game Setup screen"
In this screen you set up the basic properties and texts of your game.

Initial Level: Your game has one or more levels, when a project is created it 
only contains level 0. Initial Level is the first level that will be loaded 
when your game starts.

Gravity Factor: Vertical speed that will be applied to Objects with the 
Physics check enabled (and with weight > 0). The bigger the faster objects 
will fall.

Hi-Score base: When using the hiscore table, the default scores will be 
multiplied by this number.

Name: Name of your game. It will be used in the WHDload package.

Author: Author of your game. It will be used in the WHDload package

Air friction: Defines how much the Object speed is afected when it is not 
grounded.
	
Max frames x second: Defines the maximum frame rate of your game. The 
higher the smoother your game to run but also may have higher requirements.

Loading: Defines the loading effect to show while the game loads data.

Enemies collide with enemies: Activate enemies collision to prevent enemies 
overlapping between themselves.
Remember to set Objects as type Enemy. It increases CPU requirements.

Game font: Defines the font to use in user interface elements.

Game timing: Game timing could be time based or tick based. Amiga games are 
usually tick based (frame synchronized)

Game text: Here is where the texts used by the triggers are defined. To ease 
the editing you can define your prefered text editor in the REDPILL icon 
Tooltypes.

You can set up the text in up to 6 languages: English, French, Italian, German, Spanish and Portuguese.
After using more than one language, the games will show a menu at the start to select the language of the game.
Additionally you can name the background images and sprite images with suffixes .FR .IT .DE .ES .PT anf the game will load the image corresponding to he language.
Example of this can be found in the Absolute Zero example game.

@ENDNODE SCREEN_GAME



@NODE SCREEN_SCREEN "Screen Setup screen"
Here you set up your generaldisplay and camera preferences.

Chipset: Set the target Chipset as ECS or AGA

Colors: Sets the maximum colors to be used, 64 in ECS (extra halfbright mode) 
and 256 in AGA.

Width: Thinner displays can speed up the game and may be also needed to use 
some REDPILL graphic effects.

Default Overwrite color: Allows to replace the selected color of the palette 
for another one. This one could also be a copper generated gradient. This 
color setup can be done level by level in the level properties screen.

Camera Follow: tells the camera to follow a game object.

Camera Foward focus: is used to set the camera in front of the object in 
pixels to see more level where it is facing.

Camera Smoothing: tells how smooth is going to be the camera movement, the 
higher the more smooth.

Force NTSC height: tells the display to have a height of 200 pixels even if
it is running in a PAL machine.

Fetch mode: In AGA machines, higher Fetch modes speed up some operation done
by the Amiga chipset. Gains performance specially in machines without FAST
RAM. Quadruple Speed can be used for screens with width 320, 288 and 256.
When using 320 and quadruple speed Sprite layer is likely to fail, you
will need to reduce the screen width.

@ENDNODE SCREEN_SCREEN



@NODE SCREEN_SPRITESHEET "Spritesheet screen"
In this screen you can load images and generate independent frames from them.

Sheet: Used to change the current sprite sheet

Load Image: Loads an Amiga IFF file containing your frames.

Edit: opens the graphic editor specified in the REDPILLEditor icon tooltype.

Slice method: selects the slicing method
 Auto - the program will try to find out the different frames automatically. This can take a while in slow Amigas.
 Grid - gets the frames based on the grid defined. From left to right and from top to bottom.

Slice sheet: generates the frames based on the slide method. It can get a while to complete, specially in low configurations.

Autoflip: After the frames have been generated with Slice sheet, it generates the same frames but horizontally flipped.

Add Image: Allows to append an IFF image to the current spritesheet.

Save: Saves the current spritesheet to an IFF file.

Frame Editor: Opens the frame editor screen

Frame Editor Screen
-------------------

This screen allows to modify and add frames to the current project. Take into account the frames are saved into the project but the spritesheets are not modified.

Frame: Used to change the current frame.

Pick: Allows you to draw a rectangle in the screen and grab an individual frame as the current one.

Del: Deletes the current frame which will become empty.

Copy: Makes the current frame to be the one in the copy buffer.

Paste: Copies the frame in the copy buffer to the current frame.

Flip H: Flips the frame image horizontally.

Flip V: Flips the frame image vertically.

Paste&Rotate: Copies the current frame in the next specified frames as it rotates them to reach the angle specified.

Paste&Scale: Copies the current frame in the next specified frames as it scales them to the desired size.

Save Frames to Image: Allows to save a set of frames to an IFF image.

@ENDNODE SCREEN_SPRITESHEET



@NODE SCREEN_ANIMATION "Animation screen"
Here you define animations based on the frames generated from sprite sheets.

Current Anim: the current animation being edited.

Current Frame: the current frame from the animation. Use keys 1 and 2 to 
quickly go to previous and next frames. Use space to play the animation.

Start Frame: sets the first frame of the animation.

Num Frames: sets the number of consecutive frames the animation has.

Frame time: sets for how long each frame will be visible before stepping 
to the next one. Smaller number means the animation will play faster.

Frame offset: Here you  can change the offset of each frame to make the 
frames visuals to match. You click and drag the current frame using the mouse. 
You can also use cursor keys to move the the frame.

Loop: Defines if the animation re-starts when it reaches the end.

Next anim: When the animation ends it will switch to the specified animation. 
Use -1 for no next animation.

Sound: You can specify a sound to play when the animation plays. Use -1 for 
no sound. 

Mirror anim: Use mirror anim to specify the mirror anim of the current one. 
This should be used for the animation looking right.
When in the object you use Play Anim <anim facing right> if the object is 
facing left the mirror animation (the one facing left) will be played instead.
This way when the Object changes the facing direction the animation will
change too. You can save some triggers using this.

Finally you can set the cross position that is used just as visual reference
@ENDNODE SCREEN_ANIMATION


@NODE SCREEN_OBJECTS "Objects screen"
Objects are the game entities, are the only ones than can interact and 
change the game properties while the game is running.

They are placed in the level in certain coordinates, static objects being
in all levels by default.

Static objects are objects that exist only once, and they remain intact after
a level change.
In the Level Editor you can decide which static objects are active in each
level.
Non static objects can have multiple copies (instances) and are deleted after
a level change. Each of these non static objects can be placed multiple times
in the Level Editor or using Instantiate triggers.

Object: Changes the current object being editted.

Name: The name you will be using to refer to this object.

Type: Object cathegory, some object types have special properties.
-Player: for the object/s being used by the player.
-Shot: these objects take the direction of the object that instantiates them. 
       They are also destroyed when impacting.
-Enemy: used when the property Enemies collides enemies is activated
-Tile: TBD


Icon is a frame from the Sprite Sheets you can use to identify your object in
the Level Editor.

Each object contains triggers that execute the logic of the object.
A trigger has one or multiple conditions and when all conditions are meet,
all trigger actions are executed sequentially.

Z parameter can be used to sort the rendering of the objects.

Advanced tab
------------
-Update Object: For now this is unused.
-Max Speed: Allows to limit the maximum speed an object can move, for example 
to limit the maximum speed an object can fall.
-FX: Indicates this object will be rendered in the FX layer, rendering will
be much faster and will use the FX settings.
-FX Comp: Indicated this object render will erase the FX layer.

Objects present in the level are always active unless you use Awake on screen
and Sleep off screen. Using this flags can help speeding up your game as 
slept object processing will take less time.

-Awake on Screen: The object starts being processed when it is on screen.
-Sleep on Sceeen: The object stops being processed when it is not in the 
screen.

@ENDNODE SCREEN_OBJECTS


@NODE SCREEN_LEVELOBJECTS "Level Objects screen"
In this screen you Edit the different levels of your game.
-Objects tab: Place, move, delete objets in your level.
-Edit tab: Edit the level using tiles.

Use cursor keys to move around the map, if you press shift while moving
the speed will be much faster.

Objects Tab
-----------
In this tab the Objects of the game can be placed one or multiple times (if 
they are not static) in the levels.

The static objects are already in the level by default.

Level: to change the current level.
Level Properties: to go to the Level Properties screen.
Reload Level: Discards the changes and reloads the level.
Level Object: The current object selected in the level
Enabled: For static objects you can decide if you want it active or not for
 this level.
x, y: the position of the current level object.
Snap to tile: activate it to align coordinates to the tile grip positions.
Show Tile cols: to see the tile grid.
Add Level Object: to add non static objects to the level.

Edit tab
--------
Here the shape of the level is edited using the loaded tiles in the Tiles 
screen. Use the left mouse button to paint the level using the selected
tile. Use the right button to erase the tiles from the level.

Using the space key you can switch between the tiles and the level.
Use the control key to move the quick tile select window.

Level: to change the current level.
Tile bank: to select the tileset to be used.
Move map: allows to move the whole map tiles one position.
Select tile: to switch to the tile select screen.
Fill: single for single tile, fill to flood file using the tile selected.
The F key will have the same effect, use the C key to clear.
Clear: clears the level
Camera limit: used to define the level limits, the camera will move only in
this area.
Calculate: calculates the camera limits, based on the used area of the level.
Load map: used to read the map to disk, only the tiles.
Sava map: used to save the map to disk.
Import bin: can be used to read a map stored in bytes.
Export TMJ: to export the map in a format that can be used in Tiled, a pc 
program.
Import CSV: Used to import a map stored in comma separated values.
Map width: This sets the maximum line width for a level. It is very important
to set it as the start, as changing it later could erase some parts of the 
level.

Keys
-Cursor keys: Scroll level map
-Caps key + Cusor keys: Scroll level map fast
-Control key + Cursor keys: Scroll tiles window
-Space: Switch between level map screen and tiles screen
-Left mouse button: Current tile to map
-Right mouse button: Delete tile on map
-Control key + Left mouse button: Pick tile on map to be the current tile
-F key: Flood fill area with current tile
-C key: Delete flood fill area
-F1 key: Previous Level
-F2 key: Next Level

Level Properties screen
-----------------------
This screen is to setup the level properties.

Level: to change the current level.
Width: to change the width of the screen in this level from a range 256-320px
Next level: level to load when using the Next Level trigger.
Previous level: level to load when using the Prev Level trigger.
Music: To set up the music to play in this level
HUD: To set up if there is HUD in this level, and where it is placed.
Exits: Level to load when using the Check Exits trigger: Up/Down/Left/Right
Img BG: For non scrolling levels, you can set up a background image instead
of a tile based image.
On Enter/On Exit: to define an effect when entering and leaving the level.
Copper: used to overwrite a color from the palette.
Copper color: sets the color to overwrite.
RGB/RGB overwrite the copper color with this RGB value. In the case of a 
gradient you select the top color and the bottom color.
Sprite layer active: In AGA games you can define a layer of a 256x256 image.
The image needs to be 4 or 16 colors. This layer can be placed over or 
behind the tiles from the map.
FX layer: Adds a layer for FX effects with the palette, for ECS games it 
works for games with 16 levels or less, for AGA games it works for games
with 128 colors or less.


@ENDNODE SCREEN_LEVELOBJECTS

@NODE SCREEN_GLOBALS "Variables screen"
Variables are stored values of your game that can change. The ones in this
section are global variables but Objects also have custom variables you can
use too.

Each variable has the name, the type, and the default value.

-Bool type variables can obly be true or false.

-Trigger variables are always false until they are triggered, then they are
true but just for one frame.

-Number variables can be any positive or negative number up to +-32768. Use
a point . for decimal values.

-For Timer values you set up the starting value in miliseconds. Once Timers
 are activated
the internal counter goes down as time passes until it reaches zero.
@ENDNODE SCREEN_GLOBALS

@NODE SCREEN_TILES "Tiles screen"
In this screen Tilesets (or tile banks) are loaded and tile properties 
are assigned.

Once an image is loaded, tile size can be assigned for each tileset.
You can Edit it, if an editor has been assigned in tooltip of the Redpill 
icon.

You can assign a value to Border in case the image has empty space between
 the tiles.

Each Tileset can have its own palette too. Also each Level will have a
Tileset assigned to it defined in the Level Screen.

Image to Tiles can be used to load a source image, then REDPILL will find
the unique tiles in this image and generate a new tileset. Additionally,
the map itself can be replicated with this tileset in the current level map.

In Tile properties:
-Solidity defines if the tile is solid, objects with map collisions cannot
move through them. Platform solidity allow the objects to jump into the tiles.

-Shape tells the game if the tile is a square or a ramp.

-Layer is unused for now

-Animation can be used for animation tiles, you set up the number of tiles 
for the animation. The tiles must be consecutive.

-Anim speed sets up the speed for the animated tiles, the faster is set the
more performance will eat up from the computer.

@ENDNODE SCREEN_TILES


@NODE SCREEN_HUD "HUD screen"
Hud can be used to display information to the player, it can be on the
top or bottom of the screen.
You can load an image to act as a background, the palette used is the
game palette.
You can enable different HUD elements and position them in the HUD.
-Labels can be a Text or an Icon (a frame from the spritesheets).
-Values use a variable that can be interpreted as an icon number, the number
of times to repeat an icon, just number or a value to show in an horizontal
bar.
There are triggers to activate or deactivate the full HUD and the HUD
elements.
@ENDNODE SCREEN_HUD

@NODE SCREEN_AUDIO "Audio screen"
In Audio screen you can select the sound modules and sound IFF files.
Once they have been selected you can test them.
REDPILL is also capable of generating basic sound files with the Sound
Generator.
@ENDNODE SCREEN_AUDIO


@NODE SCREEN_SETTINGS "Settings screen"
Here you can find information and settings about the REDPILL editor.
You can disable audio in case you are in UAE and just want to listen to your
 own music.
You can decide if the collision boxes should be visible when you play the
game, use F1 to change it while playing.
You can use WB for file requesters or an own screen to avoid monitor
resolution switching.
@ENDNODE SCREEN_SETTINGS

@NODE SCREEN_INPUT "Input screen"
Here you can configure the inputs of your game. To get the code numbers you
can search in Internet 'amiga raw key codes'
Use mouse changes input of player one from joystick to mouse. If an Object
is specified the object position will be moved using the mouse.
Buffered input gives some extra frames to execute the input, it needs the
input trigger to use it.
@ENDNODE SCREEN_INPUT

@NODE SCREEN_PROFILER "Profiler screen"
This screen helps to find the parts or objects that consume more CPU or Render
 time in each game cycle.
The more red, the more time one element consumes compared to the rest of
elements.
Move the mouse over the rectangles to find more information.
@ENDNODE SCREEN_PROFILER


@NODE SCREEN_LEVELPROPS "Level Properties screen"
Here you can define multiple properpies for each level.

Navigation: Define the Next level, prev level, level on top, bottom left and
right. Triggers will use these values.

Music to play: -1 for none
HUD to use: None, Top HUD, Bottom HUD
The background image: for non scrolling games
Transitions when entering and exiting the level: Fade In or Fade Out
How to use the copper:
-To overwrite a color
-To have a gradient from top to bottom, defining the top and bottom colors

How to use the sprites in the level, background or foreground, repeat them.
The speed of this layer and how Camera affects it.

You can attach the sprite layer to an object using the corresponping trigger.
@ENDNODE SCREEN_LEVELPROPS




@NODE MAIN "REDPILL V0.9.1"

.---------------------------------------------------------------------------.
|                         @{b}REDPILL BETA V0.9.X@{ub}                               |
`---------------------------------------------------------------------------'
                           2014-2024 Gus Entertainment

                             @{"       Overview        " link OVERVIEW}
                             @{"      Main screen      " link START}
                             @{"      Play/Start       " link PLAY}
                             @{"   Game Setup screen   " link SCREEN_GAME}
                             @{"  Screen Setup screen  " link SCREEN_SCREEN}
                             @{"   Spritesheet screen  " link SCREEN_SPRITESHEET}
                             @{"    Objects screen     " link SCREEN_OBJECTS}
                             @{"   Animation screen    " link SCREEN_ANIMATION}
                             @{"   Variables screen    " link SCREEN_GLOBALS}
                             @{"     Tiles screen      " link SCREEN_TILES}
                             @{"     Level screen      " link SCREEN_LEVELOBJECTS}
                             @{"       HUD screen      " link SCREEN_HUD}
                             @{"     Audio screen      " link SCREEN_AUDIO}
                             @{"     Input screen      " link SCREEN_INPUT}
                             @{"Level Properties screen" link SCREEN_LEVELPROPS}
                             @{"    Profiler screen    " link SCREEN_PROFILER}
                             @{"    Settings screen    " link SCREEN_SETTINGS}

                             @{"Preparing a game for distributon" link DISTRIBUTION}


@ENDNODE MAIN
