Set Buffer 800
' ###############################################
' #          CONSTANT VARIABLES                 #
' ###############################################

' ### First, identify the BOB id 
_BOB_PLAYER=1 

' ### Maps/screen constant 
Global MWIDTH,MHEIGHT,SWIDTH,SHEIGHT
MWIDTH=18 : MHEIGHT=10 : SWIDTH=320 : SHEIGHT=180

' ###############################################
' #              ROOM VARIABLES                 #
' ###############################################
' ## Starting point room 13
ROOM=13

' ###############################################
' #              DOOR MANAGMENT                 #
' ###############################################
' ### Door definicion, 25 rooms, from 1 to 4 _DOORS by room 
' ## 3 data per door, x y coors and room destination 
' # 25 because 25 rooms, 4 because max 4 _DOORS, 3 for x,y,dest 
Dim NBRDOORS(25) 
Dim _DOORS(25,4,3)

' ### ROOM 13
NBRDOORS(13)=2
' Left door
_DOORS(13,1,0)=23
_DOORS(13,1,1)=70
_DOORS(13,1,2)=6

' Right door 
_DOORS(13,2,0)=296
_DOORS(13,2,1)=103
_DOORS(13,2,2)=8

' ### ROOM 12
NBRDOORS(12)=2
' Left door
_DOORS(12,1,0)=23
_DOORS(12,1,1)=70
_DOORS(12,1,2)=6

' Right door 
_DOORS(12,2,0)=296
_DOORS(12,2,1)=70
_DOORS(12,2,2)=8

' ### ROOM 11
NBRDOORS(11)=3
' Left door
_DOORS(11,1,0)=23
_DOORS(11,1,1)=70
_DOORS(11,1,2)=6

' Right door 
_DOORS(11,2,0)=296
_DOORS(11,2,1)=70
_DOORS(11,2,2)=8

' Bottom door 
_DOORS(11,3,0)=125
_DOORS(11,3,1)=170
_DOORS(11,3,2)=6

' ###############################################
' #               MAP MANAGMENT                 #
' ###############################################
Dim MAP(MWIDTH,MHEIGHT)
Global MAP()

' ##############################################   
' #            TEXT FOR ALL ROOMS              #   
' ##############################################   

'## ROOM TEXT
Dim CHAT$(55)
Global CHAT$()
'Include "amiga:amos_prg/sorcery/src/blabla.amos"

'## PERGAMINO TEXT 
Dim PERG$(25,4)
Global PERG$()
PERG$(13,1)="During your quest you'll have to find some objects."
PERG$(13,2)="Potions, keys and also secret _DOORS..."
PERG$(13,3)="You can't fight with ghosts, if you touch one,"
PERG$(13,4)="you are dead. Only white potion is useful with them."

PERG$(12,1)="You can 't kill a ghost ! But ..."
PERG$(12,2)="you can dodge with the white potion... Good luck"


' ###############################################
' #                 ENEMIES                     #
' ###############################################
' # 25 rooms, 2 enemies max per room, 5 data per enemie
' # x,y coords, frame number and amal flag 
Dim ENEMIES(25,2,5)

' ## Room 13 
' #Ghost 
ENEMIES(13,1,0)=156 : Rem x coord
ENEMIES(13,1,1)=23 : Rem y COORD
ENEMIES(13,1,2)=10 : Rem frame number 
ENEMIES(13,1,3)=140 : Rem distance in px for the move
ENEMIES(13,1,4)=1 : Rem flag 1 = activated 

' # Eye
ENEMIES(13,2,0)=150
ENEMIES(13,2,1)=150
ENEMIES(13,2,2)=11
ENEMIES(13,2,3)=70
ENEMIES(13,2,4)=1

' # Ozoer
ENEMIES(12,1,0)=80
ENEMIES(12,1,1)=50
ENEMIES(12,1,2)=17
ENEMIES(12,1,3)=65
ENEMIES(12,1,4)=1

' ###############################################
' #              PLAYER VARIABLES               #
' ###############################################
Global PX,PY,POS,_PLAYER,_RIGHT,_LEFT,_UP,_DOWN
Global LIVES,ENERGY,LEVITATION
Global STATE,LANDPOSXLEFT,LANDPOSYLEFT,LANDPOSXRIGHT,LANDPOSYRIGHT
PX=40 : PY=80 : POS=1 : LANDPOSXLEFT=275 : LANDPOSXRIGHT=40
ENERGY=100 : LIVES=3 : LEVITATION=200 : STATE=0

' ###############################################
' #              ITEMS MANAGMENT                #
' ###############################################

' ## Items id
' 1 = Key
' 2 = Pergamino
' 3 = red potion 
' 4 = blue potion
' 5 = white potion 

Dim ITEMS(25,4,4)
Dim NBRITEMS(25)
global KEY,RED_POTION,BLUE_POTION,WHITE_POTION
KEY=0 : RED_POTION=0 : BLUE_POTION=0 : WHITE_POTION=0


' ## ROOM 13 
' Key
NBRITEMS(13)=2
ITEMS(13,1,0)=295 : rem x coord
ITEMS(13,1,1)=25 : rem y coord
ITEMS(13,1,2)=15 : rem frame id
ITEMS(13,1,3)=1 : rem visible or not

' pergamino
ITEMS(13,2,0)=72
ITEMS(13,2,1)=152
ITEMS(13,2,2)=16
ITEMS(13,2,3)=1

' ## ROOM 12 
NBRITEMS(12)=2
' Red potion 
ITEMS(12,1,0)=73
ITEMS(12,1,1)=151
ITEMS(12,1,2)=14
ITEMS(12,1,3)=1

' pergamino
ITEMS(12,2,0)=217
ITEMS(12,2,1)=152
ITEMS(12,2,2)=16
ITEMS(12,2,3)=1

' ###############################################
' #              PROCEDURES                     #
' ###############################################

Procedure _SCREEN

   Screen Open 1,640,70,16,Hires
   Curs Off : Flash Off : Hide : Cls 0
   Screen Display 1,,230,640,70
   Ink 2,0

   Screen Open 0,SWIDTH,SHEIGHT,32,Lowres
   Curs Off : Flash Off : Hide : Cls 0

   ' ## Bank load 
   Load "/abk/font.abk"
   Load "/abk/tiles.abk"
   Load "/abk/player.abk"
   Get Icon Palette 
   
  ' Load "abk/sounds.abk"
   Double Buffer : Autoback 1
   
End Proc

Procedure _MAP[ROOM]

   shared ROOM
   Screen 1: Cls 0
   
   Screen 0
   STATE=0
   Bob Off : Bob Update 
   CUAL$="SALA"+Str$(ROOM)-" "
   print ROOM
   Restore CUAL$
   For Y=1 To MHEIGHT
      For X=1 To MWIDTH
         Read ID_TILE
         MAP(X,Y)=ID_TILE
         Paste Icon X*16,Y*16,ID_TILE
      Next X
   Next Y
   SALA13:
   Data 15,15,15,15,15,15,15,15,1,1,1,1,1,1,1,1,1,1
   Data 1,15,15,15,15,20,19,10,1,1,23,1,1,1,1,16,16,37
   Data 1,1,15,15,15,19,20,10,1,1,24,25,1,1,1,1,16,11
   Data 1,1,1,15,15,19,20,10,1,1,1,1,1,1,1,1,1,17
   Data 5,6,1,1,15,1,1,11,1,1,1,1,1,1,1,1,1,18
   Data 1,1,1,1,17,1,1,1,1,1,1,1,1,1,1,1,1,1
   Data 1,1,1,1,18,1,1,1,1,1,1,1,1,1,1,1,6,5
   Data 1,1,1,1,17,14,1,1,1,1,1,1,1,14,1,1,1,1
   Data 1,1,1,1,18,8,14,1,1,1,1,1,1,8,1,1,1,1
   Data 2,5,5,5,26,9,9,5,5,5,31,5,5,9,5,5,5,3

   SALA12:
   Data 15,15,1,1,15,15,15,15,1,1,1,1,1,1,1,1,1,1
   Data 1,15,15,15,15,15,15,1,1,1,1,1,1,1,1,23,1,1
   Data 1,1,15,15,15,15,1,1,1,1,1,1,1,1,1,24,25,1
   Data 1,1,1,15,15,19,20,15,1,1,1,1,1,1,1,1,1,1
   Data 5,6,1,1,15,19,20,15,1,1,1,1,1,35,1,1,6,5
   Data 40,1,1,1,1,1,1,17,1,6,6,6,6,6,6,6,1,1
   Data 37,6,1,1,39,1,1,15,1,1,1,1,1,1,1,1,34,1
   Data 1,1,37,1,37,1,1,17,1,1,1,1,1,1,1,1,38,1
   Data 1,1,38,1,38,1,1,17,1,1,1,14,1,1,1,1,37,1
   Data 2,5,5,5,5,5,5,26,5,1,5,13,5,5,5,5,5,3

   SALA11:
   Data 15,15,19,20,15,15,15,15,37,1,1,1,1,1,1,1,1,1
   Data 15,15,19,20,15,19,20,15,38,1,1,1,1,1,1,1,1,1
   Data 15,1,1,1,1,1,1,1,11,1,1,1,1,1,1,1,1,1
   Data 15,1,1,1,1,34,1,1,1,1,1,1,1,1,1,1,1,1
   Data 41,41,41,41,41,41,1,1,1,34,1,1,1,42,1,1,6,5
   Data 15,15,1,1,1,1,1,1,1,6,6,6,6,6,6,6,1,1
   Data 18,17,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
   Data 17,18,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
   Data 18,17,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1
   Data 26,26,2,4,4,1,4,3,43,44,44,45,2,4,4,4,4,3

End Proc

Procedure _RENDEROBJECTS

   shared ROOM,NBRITEMS(),ITEMS(),_DOORS(),NBRDOORS(),_BOB_PLAYER,LANDPOSXLEFT,LANDPOSYLEFT,LANDPOSXRIGHT,LANDPOSYRIGHT

   ' Desactivar todos los Bobs excepto el jugador
      For I=2 To 16
         Bob Off I
         Amal Off I
      Next I   

   ' Contador de Bobs activos (empezamos en 2 porque 1 es el jugador)
       _BOB_ID=2

   ' Renderizar puertas
      For D=1 To NBRDOORS(ROOM)
         If _BOB_ID>16 Then Exit 
         X=_DOORS(ROOM,D,0)
         Y=_DOORS(ROOM,D,1)
         FRAME=_DOORS(ROOM,D,2)
         If D=1
            Bob _BOB_ID,X,Y,FRAME : LANDPOSYRIGHT=Y
         Else If D=2
            Bob _BOB_ID,X,Y,FRAME : LANDPOSYLEFT=Y-30
         Else If D=3
            Bob _BOB_ID,X,Y,FRAME : LANDPOSYLEFT=Y-30
         Else If D=4
            Bob _BOB_ID,X,Y,FRAME : LANDPOSYLEFT=Y-30
         End If
            Inc _BOB_ID
      Next D

     ' Renderizar ítems
   For I=1 To NBRITEMS(ROOM)
      If ITEMS(ROOM,I,2)>0 and ITEMS(ROOM,I,3)=1
         X=ITEMS(ROOM,I,0)
         Y=ITEMS(ROOM,I,1)
         FRAME=ITEMS(ROOM,I,2)
         Bob _BOB_ID,X,Y,FRAME
         Inc _BOB_ID
      End If
   Next I

end Proc

Procedure _UPDATE

   ' # Player position in tiles 
   TILEX=(PX/16)
   TILEY=(PY/16)
   _PLAYER=MAP(TILEX,TILEY)

   ' # Player right position in tiles 
   TILEXR=(PX+9)/16
   TILEYR=(PY/16)
   _RIGHT=MAP(TILEXR,TILEYR)

   ' # Player left position in tiles
   TILEXL=(PX-9)/16
   TILEYL=(PY/16)
   _LEFT=MAP(TILEXL,TILEYL)

   ' # Player up position in tiles
   TILEXU=(PX/16)
   TILEYU=(PY-9)/16
   _UP=MAP(TILEXU,TILEYU)

   ' # Player down position in tiles
   TILEXD=(PX/16)
   TILEYD=(PY+9)/16
   _DOWN=MAP(TILEXD,TILEYD)

   If TILEX<0 Then TILEX=0
   If TILEX>MWIDTH Then TILEX=MWIDTH
   If TILEY<0 Then TILEY=0
   If TILEY>MHEIGHT Then TILEY=MHEIGHT

   If _PLAYER=26 or _DOWN=26 or _DOWN=12 or _DOWN=13 or _DOWN=10 or _DOWN=37 or _DOWN=38 or _DOWN=31 or _DOWN=5 or _DOWN=3 or _DOWN=6 or _DOWN=2 or _DOWN=8 or _DOWN=9
      Add LEVITATION,1
   Else 
      Add PY,1
      If PY>172
         PY=172
      End If 
   End If 

   ' ############# MOVEMENTS
   If Key State(78)=True and PX<290 Then Add PX,2 : POS=1
   If Key State(79)=True and PX>20 Then Add PX,-2 : POS=Hrev(1)
   If Key State(76)=True and PY>16 and LEVITATION>=1 Then Add PY,-2 : Add LEVITATION,-1
   If Key State(77)=True and PY<165 Then Add PY,2
   If LEVITATION>200 Then LEVITATION=200

End Proc

Procedure _TXT
   Screen 1
   Cls 0
   Change Bank Font 4
   Rem Inicializamos variables
   _TEXT$=CHAT$(ROOM) : Rem El texto completo de la sala 
   LINE_NUM=30 : Rem Contador de líneas
   REST$=_TEXT$ : Rem Cadena restante para procesar
   
   Rem Bucle para procesar cada línea
   While REST$<>""
      Rem Buscamos el salto de línea
      BREAK=Instr(REST$,Chr$(10)+Chr$(13))
      If BREAK=0
         Rem No hay más saltos, tomamos el resto como última línea 
         LINE$=REST$
         REST$=""
      Else 
         Rem Extraemos la línea hasta el salto 
         LINE$=Left$(REST$,BREAK-1)
         Rem Actualizamos REST$ para la siguiente línea
         REST$=Right$(REST$,Len(REST$)-BREAK-1)
      End If 
      Rem Mostramos la línea si no está vacía 
      If LINE$<>""
         Text 10,LINE_NUM,LINE$
         LINE_NUM=LINE_NUM+10
      End If 
   Wend 
End Proc

Procedure _TEXT
   
   Ink 2,0
   OLD_LIVES=-1 : OLD_ENERGY=-1 : OLD_LEVITATION=-1
   
   If LIVES<>OLD_LIVES Then Text 15,15,"LIVES "+Str$(LIVES)+"  " : OLD_LIVES=LIVES
   If ENERGY<>OLD_ENERGY Then Text 130,15,"ENERGY "+Str$(ENERGY)+"   " : OLD_ENERGY=ENERGY
   If LEVITATION<>OLD_LEVITATION Then Text 250,15,"LEVITATION "+Str$(LEVITATION)+"   " : OLD_LEVITATION=LEVITATION

   Text 30,50,"STATE"+Str$(STATE)
   Text 30,60,"red potion"+Str$(RED_POTION)

   
   Box 452,1 To 639,69
   Ink 5,0
   Box 451,2 To 637,69
   
   If KEY=1
      Text 460,20,"You get"+Str$(KEY)+" key."
   End If 
   If RED_POTION=1
      Text 460,30,"You get"+Str$(RED_POTION)+" potion multifire."
   End If 
End Proc

Procedure _COLL
   Shared ROOM, _BOB_PLAYER, NBRITEMS(), ITEMS(), _DOORS(), NBRDOORS()
   Shared PX, PY, LANDPOSXLEFT, LANDPOSYLEFT, LANDPOSXRIGHT, LANDPOSYRIGHT
   Shared STATE, KEY, RED_POTION
   
   For B=2 To 16
      If Bob Col(_BOB_PLAYER, B)=True And STATE=0
         STATE=1
         
         ' ## Puertas
         For D=1 To NBRDOORS(ROOM)
            If B=2 And D=1
               Bob Off B
               PX=LANDPOSXLEFT : PY=LANDPOSYLEFT : Add ROOM,-1
               _MAP[ROOM] : _RENDEROBJECTS
               STATE=0
               Exit
            Else If B=3 And D=2
               Bob Off B
               PX=LANDPOSXRIGHT : PY=LANDPOSYRIGHT : Add ROOM,1
               _MAP[ROOM] : _RENDEROBJECTS
               STATE=0
               Exit
            Else If B=4 And D=3
               Bob Off B
               PX=LANDPOSXRIGHT : PY=LANDPOSYRIGHT : Add ROOM,1
               _MAP[ROOM] : _RENDEROBJECTS
               STATE=0
               Exit
            End If
         Next D
         
         ' ## Ítems
         For I=1 To NBRITEMS(ROOM)
            If ITEMS(ROOM,I,2)>0 And ITEMS(ROOM,I,3)=1
               X=ITEMS(ROOM,I,0) : Y=ITEMS(ROOM,I,1) : FRAME=ITEMS(ROOM,I,2)
               ' Verificar que el Bob B corresponde al ítem (por posición aproximada)
               If PX>=X-8 And PX<=X+8 And PY>=Y-8 And PY<=Y+8
                  If FRAME=15
                     Bob Off B
                     ITEMS(ROOM,I,3)=0 : KEY=1
                     STATE=0
                     Exit
                  Else If FRAME=16
                     Bob Off B
                     ITEMS(ROOM,I,3)=0
                     Screen 1 : Cls 0
                     Text 10,30,PERG$(ROOM,1)
                     Text 10,40,PERG$(ROOM,2)
                     Screen 0
                     STATE=0
                     Exit
                  Else If FRAME=14
                     Bob Off B
                     ITEMS(ROOM,I,3)=0 : RED_POTION=1
                     STATE=0
                     Exit
                  End If
               End If
            End If
         Next I
         
         STATE=0
      End If
   Next B
   
End Proc

   ' ## PERGAMINO 
'   If Bob Col(_BOB_PLAYER,_BOB_PERGAMINO To _BOB_PERGAMINO)=True and STATE=0
'      STATE=1
'      Bob Off _BOB_PERGAMINO
'      ITEMS(ROOM,2,3)=0 : _RENDERITEMS
'      Screen 1
'      Cls 0
'      Text 10,30,PERG$(ROOM,1)
'      Text 10,40,PERG$(ROOM,2)
'   End If 
   
   ' ## KEY 
'   If Bob Col(_BOB_PLAYER,_BOB_KEY To _BOB_KEY)=True and STATE=0
'      STATE=1
'      Bob Off _BOB_KEY
'      ITEMS(ROOM,1,3)=0 : _RENDERITEMS : KEY=1
'   End If 
   
   ' ## RED POTION  
'   If Bob Col(_BOB_PLAYER,_BOB_RED_POTION To _BOB_RED_POTION)=True and STATE=0
'      STATE=1
'      Bob Off _BOB_RED_POTION : RED_POTION=1
'      ITEMS(ROOM,1,3)=0 : _RENDERITEMS
'   End If 
   
   ' ## Ghost 
'   If Bob Col(_BOB_PLAYER,_BOB_GHOST To _BOB_GHOST)=True and STATE=0
'      STATE=1
'      Bob Off _BOB_PLAYER
'      Add LIVES,-1
'      ROOM=13
'      _MAP[ROOM] : PX=40 : PY=80 : POS=1
'      _RENDER_DOORS
'      _RENDERITEMS
'      _RENDERENEMIES
'      Screen 1 : Cls 0 : Text 10,30,PERG$(ROOM,3) : Text 10,40,PERG$(ROOM,4)
'      Screen 0
'   End If 
   
' ###############################################
' #              GAME START                     #
' ###############################################

_SCREEN
_MAP[ROOM]
_RENDEROBJECTS
_TXT

Do 
   Screen 1
   _TEXT
   
   Screen 0
   _UPDATE
   _COLL
   Bob _BOB_PLAYER,PX,PY,POS
   Wait Vbl 
Loop